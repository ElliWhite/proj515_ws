;; Auto-generated. Do not edit!


(when (boundp 'waypoint_navigation::goToWaypointGoal)
  (if (not (find-package "WAYPOINT_NAVIGATION"))
    (make-package "WAYPOINT_NAVIGATION"))
  (shadow 'goToWaypointGoal (find-package "WAYPOINT_NAVIGATION")))
(unless (find-package "WAYPOINT_NAVIGATION::GOTOWAYPOINTGOAL")
  (make-package "WAYPOINT_NAVIGATION::GOTOWAYPOINTGOAL"))

(in-package "ROS")
;;//! \htmlinclude goToWaypointGoal.msg.html
(if (not (find-package "MOVE_BASE_MSGS"))
  (ros::roseus-add-msgs "move_base_msgs"))


(defclass waypoint_navigation::goToWaypointGoal
  :super ros::object
  :slots (_move_base_goal ))

(defmethod waypoint_navigation::goToWaypointGoal
  (:init
   (&key
    ((:move_base_goal __move_base_goal) (instance move_base_msgs::MoveBaseActionGoal :init))
    )
   (send-super :init)
   (setq _move_base_goal __move_base_goal)
   self)
  (:move_base_goal
   (&rest __move_base_goal)
   (if (keywordp (car __move_base_goal))
       (send* _move_base_goal __move_base_goal)
     (progn
       (if __move_base_goal (setq _move_base_goal (car __move_base_goal)))
       _move_base_goal)))
  (:serialization-length
   ()
   (+
    ;; move_base_msgs/MoveBaseActionGoal _move_base_goal
    (send _move_base_goal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; move_base_msgs/MoveBaseActionGoal _move_base_goal
       (send _move_base_goal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; move_base_msgs/MoveBaseActionGoal _move_base_goal
     (send _move_base_goal :deserialize buf ptr-) (incf ptr- (send _move_base_goal :serialization-length))
   ;;
   self)
  )

(setf (get waypoint_navigation::goToWaypointGoal :md5sum-) "527f3c9e12a6914b7e6eb77ae24e5113")
(setf (get waypoint_navigation::goToWaypointGoal :datatype-) "waypoint_navigation/goToWaypointGoal")
(setf (get waypoint_navigation::goToWaypointGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
move_base_msgs/MoveBaseActionGoal move_base_goal

================================================================================
MSG: move_base_msgs/MoveBaseActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveBaseGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: move_base_msgs/MoveBaseGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped target_pose

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :waypoint_navigation/goToWaypointGoal "527f3c9e12a6914b7e6eb77ae24e5113")


